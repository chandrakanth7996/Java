/* 1. Two Sum
Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
You can return the answer in any order.
Example 1:
Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
Example 2:
Input: nums = [3,2,4], target = 6
Output: [1,2]   */

class Solution {
    public int[] twoSum(int[] nums, int target) {
        int n = nums.length;
        HashMap<Integer,Integer> hm = new HashMap<>();
        for(int i=0;i<n;i++){
            int res = target - nums[i];
            if(hm.containsKey(res)){                      // Check if the complement exists in the HashMap
                return new int[] {hm.get(res),i};          // If found, return the indices of the complement and the current number
            }
            hm.put(nums[i],i);                            // If not found, add the current number and its index to the HashMap
        }
        throw new IllegalArgumentException("no match found!");
    }
}
