Given an array nums. We define a running sum of an array as runningSum[i] = sum(nums[0]â€¦nums[i]).
Return the running sum of nums.
Example 1:
Input: nums = [1,2,3,4]
Output: [1,3,6,10]
Explanation: Running sum is obtained as follows: [1, 1+2, 1+2+3, 1+2+3+4].

class Solution {
    public int[] runningSum(int[] nums) {
        for(int i=1;i<nums.length;i++){
            nums[i] += nums[i-1];
        }
        return nums;
    }
}

Execution:
1. **First iteration (i = 1):**
   - We update `nums[1]` by adding `nums[0]` to it:
     - `nums[1] = nums[1] + nums[0]`
     - `nums[1] = 2 + 1 = 3`
   - Now, the array looks like this: `nums = [1, 3, 3, 4]`

2. **Second iteration (i = 2):**
   - We update `nums[2]` by adding `nums[1]` to it:
     - `nums[2] = nums[2] + nums[1]`
     - `nums[2] = 3 + 3 = 6`
   - Now, the array looks like this: `nums = [1, 3, 6, 4]`

3. **Third iteration (i = 3):**
   - We update `nums[3]` by adding `nums[2]` to it:
     - `nums[3] = nums[3] + nums[2]`
     - `nums[3] = 4 + 6 = 10`
   - Now, the array looks like this: `nums = [1, 3, 6, 10]`

#### Final Output:
- The final array `nums` after the loop finishes is: `[1, 3, 6, 10]`
- This represents the running sum of the original array.

#### Explanation:
- The running sum for the input array `[1, 2, 3, 4]` is:
  - `nums[0] = 1` (since it's the first element)
  - `nums[1] = 1 + 2 = 3`
  - `nums[2] = 1 + 2 + 3 = 6`
  - `nums[3] = 1 + 2 + 3 + 4 = 10`
