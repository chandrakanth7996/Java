/* 930. Binary Subarrays With Sum
Given a binary array nums and an integer goal, return the number of non-empty subarrays with a sum goal.
A subarray is a contiguous part of the array.
Example 1:
Input: nums = [1,0,1,0,1], goal = 2
Output: 4
Explanation: The 4 subarrays are bolded and underlined below:
[1,0,1,0,1]
[1,0,1,0,1]
[1,0,1,0,1]
[1,0,1,0,1]
Example 2:
Input: nums = [0,0,0,0,0], goal = 0
Output: 15  */

class Solution {
    public int atmostK(int[] nums, int k){
        if(k<0){                              // If k is negative, no subarray can have a negative sum
            return 0;
        }
        int n = nums.length;
        int l=0,r=0,temp=0,ans=0;
        for(r=0;r<n;r++){
            temp += nums[r];                // Add the current element to the sum

            while(temp>k){                   // If the current sum exceeds k, adjust the left pointer
                temp -= nums[l];              // Subtract the leftmost element
                l++;                          // Move the left pointer to the right
            }

            ans += r-l+1;               // Count of valid subarrays ending at r
        }
        return ans;
    }

    public int numSubarraysWithSum(int[] nums, int goal) {
         // The number of subarrays with sum exactly 'goal' is the difference
        // between the number of subarrays with sum at most 'goal' and at most 'goal - 1'
        return atmostK(nums,goal)-atmostK(nums,goal-1);
    }
}
