Given an integer array nums, rotate the array to the right by k steps, where k is non-negative.
Example 1:
Input: nums = [1,2,3,4,5,6,7], k = 3
Output: [5,6,7,1,2,3,4]
Explanation:
rotate 1 steps to the right: [7,1,2,3,4,5,6]
rotate 2 steps to the right: [6,7,1,2,3,4,5]
rotate 3 steps to the right: [5,6,7,1,2,3,4]

class Solution {
    public void reverse(int[] nums,int start,int end){
        while(start<end){
            int temp = nums[start];
            nums[start] = nums[end];
            nums[end] = temp;
            start++;
            end--;
        }
    }
    public void rotateLeft(int[] nums,int n,int k){
        k=k%n;                                  // Handle cases where k >= n
        reverse(nums,0,n-1);                    // Step 1: Reverse the entire array
        reverse(nums,0,k-1);                    // Step 2: Reverse the first k elements
        reverse(nums,k,n-1);                    // Step 3: Reverse the remaining n - k elements
    }
    public void rotate(int[] nums, int k) {
        int n = nums.length;
        rotateLeft(nums,n,k);
    }
}

Steps in the Code:
Modulo operation (k = k % n) to handle cases where k >= n.
Reverse the entire array.
Reverse the first k elements.
Reverse the remaining n-k elements.
