You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.
Merge nums1 and nums2 into a single array sorted in non-decreasing order.
The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.
Example 1:
Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
Output: [1,2,2,3,5,6]
Explanation: The arrays we are merging are [1,2,3] and [2,5,6].
The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.

class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        List<Integer> ls = new ArrayList<>();

        for(int i=0;i<m;i++){
            ls.add(nums1[i]);            // Add elements from nums1 to the list
        }
        for(int i=0;i<n;i++){
            ls.add(nums2[i]);            // Add elements from nums2 to the list
        }
        Collections.sort(ls);            // Sort the list
        
        for(int i=0;i<ls.size();i++){        // Copy the sorted elements back to nums1
            nums1[i] = ls.get(i);
        }
        System.out.println(ls);
    }
}


Steps:
Initial List:
We create an empty List<Integer> list.
Add elements from nums1 and nums2 to list:
list = [1, 3, 5, 2, 4, 6]

Sort the List:
list becomes [1, 2, 3, 4, 5, 6] after sorting.

Copy Sorted List back to nums1:
We copy each element from the sorted list back to nums1.
nums1 becomes [1, 2, 3, 4, 5, 6].
