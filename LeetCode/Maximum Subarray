53. Maximum Subarray
Given an integer array nums, find the subarray with the largest sum, and return its sum.
Example 1:
Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: The subarray [4,-1,2,1] has the largest sum 6.

class Solution {
    public int maxSubArray(int[] nums) {
        int n=nums.length;
        int sum=0;
        int ans=Integer.MIN_VALUE;
        for(int i=0;i<n;i++){
            sum = Math.max(nums[i],sum+nums[i]);          // Decide whether to add nums[i] to the current subarray or start fresh from nums[i]
            ans = Math.max(ans,sum);                      // Update ans if the current subarray sum is the best we've seen
        }
        return ans;
    }
}

Dry run:
Index arr[i]	    sum	                ans
0	    -2	Initialize to arr[0] → -2	Initialize to arr[0] → -2
1	    1	max(1, -2 + 1) → 1	max(-2, 1) → 1
2	    -3	max(-3, 1 + -3) → -2	max(1, -2) → 1
3	    4	max(4, -2 + 4) → 4	max(1, 4) → 4
4	    -1	max(-1, 4 + -1) → 3	max(4, 3) → 4
5	    2	max(2, 3 + 2) → 5	max(4, 5) → 5
6	    1	max(1, 5 + 1) → 6	max(5, 6) → 6
7	    -5	max(-5, 6 + -5) → 1	max(6, 1) → 6
8	    4	max(4, 1 + 4) → 5	max(6, 5) → 6
