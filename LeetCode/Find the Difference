/* 389. Find the Difference
You are given two strings s and t.
String t is generated by random shuffling string s and then add one more letter at a random position.
Return the letter that was added to t.
Example 1:
Input: s = "abcd", t = "abcde"
Output: "e"
Explanation: 'e' is the letter that was added.  */

import java.util.*;
class HelloWorld {
    public static void main(String[] args) {
        String s = "abcd";
        String t = "abcde";
        int sn = s.length();
        int tn = t.length();
        HashMap<Character,Integer> hm = new HashMap<>();
        HashMap<Character,Integer> tm = new HashMap<>();
        for(int i=0;i<sn;i++){
            char ch = s.charAt(i);
            hm.put(ch,hm.getOrDefault(ch,0)+1);
        }
        
        for(int j=0;j<tn;j++){
            char th = t.charAt(j);
            tm.put(th,tm.getOrDefault(th,0)+1);
        }
        
        char extra = ' ';
        for(Map.Entry<Character,Integer> m : tm.entrySet()){     // Loop through the frequency map for t to find the extra character
            char key = m.getKey();                               // Current character from t
            int countInt = m.getValue();                        // Frequency of key in t
            int countIns = hm.getOrDefault(key,0);              // Frequency of key in s

            // Compare frequencies: if t's count is greater than s's
            if(countInt > countIns){
                extra = key;      // This character is the extra one
                break;
            }
        }
        System.out.println(extra);
        
    }
}

// 2nd way of solution using XOR 
Bitwise Operation: XOR (exclusive OR) operates at the bit level. When applied to two bits, it returns:
1 if the bits are different.
0 if the bits are the same.

class HelloWorld {
    public static void main(String[] args) {
        String s = "abcd";
        String t = "abcde";
        
        // Initialize a variable to hold the XOR result
        char extraChar = 0;
        
        // XOR all characters in s
        for (char ch : s.toCharArray()) {
            extraChar ^= ch; // Cumulatively XOR each character
        }
        
        // XOR all characters in t
        for (char ch : t.toCharArray()) {
            extraChar ^= ch; // Cumulatively XOR each character
        }
        
        // The result will be the extra character
        System.out.println("Extra character: " + extraChar); // Output: e
    }
}

// Explanation:
1. **Initialization**:
   - `extraChar = 0` (as an integer initially, but will be used as a character).

2. **XORing Characters in `s`**:
   - After processing each character in `s`, `extraChar` is updated:
     - `extraChar = 0 XOR 'a'`
     - `extraChar = (result from previous XOR) XOR 'b'`
     - `extraChar = (result from previous XOR) XOR 'c'`
     - `extraChar = (result from previous XOR) XOR 'd'`
   - At this point, `extraChar` contains the cumulative XOR of all characters in `s`.

3. **XORing Characters in `t`**:
   - Similar process for `t`:
     - `extraChar = (cumulative XOR from s) XOR 'a'`
     - `extraChar = (cumulative XOR from s) XOR 'b'`
     - `extraChar = (cumulative XOR from s) XOR 'c'`
     - `extraChar = (cumulative XOR from s) XOR 'd'`
     - `extraChar = (cumulative XOR from s) XOR 'e'`
   - At this point, due to the properties of XOR, all characters from `s` will cancel out, and what remains will be the ASCII value of the character `'e'`.
