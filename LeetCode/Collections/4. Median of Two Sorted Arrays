Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.
The overall run time complexity should be O(log (m+n)).
Example 1:
Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.
Example 2:
Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.

class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        List<Integer> list1 = new ArrayList<>();
        for(int i:nums1){
            list1.add(i);
        }
        List<Integer> list2 = new ArrayList<>();
        for(int i:nums2){
            list2.add(i);
        }
        list1.addAll(list2);
        Collections.sort(list1);
        int n = list1.size();
        if(n%2 != 0){
            return list1.get(n/2);
        } else {
            double mid1 = list1.get(n/2-1);
            double mid2 = list1.get(n/2);
            return (mid1+mid2)/2.0;
        }
    }
}

Explanation:
Sort the List: We sort the list using Collections.sort(list) as before.
Finding the Median:
Odd number of elements: We return the middle element, which is at index n / 2 (because indexing starts at 0).
Even number of elements: We return the average of the two middle elements. These elements are at indices n / 2 - 1 and n / 2.
