/* 1876. Substrings of Size Three with Distinct Characters
A string is good if there are no repeated characters.
Given a string s​​​​​, return the number of good substrings of length three in s​​​​​​.
Note that if there are multiple occurrences of the same substring, every occurrence should be counted.
A substring is a contiguous sequence of characters in a string.
Example 1:
Input: s = "xyzzaz" 
Output: 1
Explanation: There are 4 substrings of size 3: "xyz", "yzz", "zza", and "zaz".  
The only good substring of length 3 is "xyz". */

// brute force approach : time complexity - O(n3) 
import java.util.*;
class HelloWorld {
    public static boolean fun(String s,int sl){
        int n = s.length();
        HashSet<Character> hs = new HashSet<>();
        for(int i=0;i<n;i++){
            char ch = s.charAt(i);
            hs.add(ch);
        }
        if(hs.size()==sl){
            return true;
        } else {
            return false;
        }
    }
    public static void main(String[] args) {
        String str = "xyzzaz";
        int n = str.length();
        int ans = 0;
        int sl = 3;
        for(int i=0;i<n-sl+1;i++){
            boolean temp = fun(str.substring(i,i+sl),sl);
            if(temp){
                ans+=1;
            }
        }
        System.out.println(ans);     //output: 1
    }
}
//The code counts the number of substrings of a given length `sl` from the input string `str` that contain exactly `sl` unique characters. 
//It uses a `HashSet` to track unique characters in each substring and increments a counter for each valid substring. Finally, it prints the count of such substrings.

// 2nd way of solution using HashMap : O(n)
import java.util.*;
class HelloWorld {
    public static void main(String[] args) {
        String s = "xyzzaz";
        int n = s.length();
        HashMap<Character,Integer> hm = new HashMap<>();
        int l=0,r=0;
        int ans = 0;
        int sl = 3;
        for(r=0;r<n;r++){
            char ch = s.charAt(r);
            hm.put(ch,hm.getOrDefault(ch,0)+1);
            if(r-l == sl){                       // checks if the window size is exactly sl (which is 3 in this case).
                char tch = s.charAt(l);          // tch is the character at the left end of the window (s.charAt(l)).
                hm.put(tch,hm.get(tch)-1);       //  decrements the count of tch in the HashMap
                if(hm.get(tch)==0){
                    hm.remove(tch);
                }
                l++;
            }
            if(hm.size()==sl){       // checks if the number of unique characters in the HashMap is equal to sl.
                ans+=1;
            }
        }
        System.out.println(ans);
    }
}
