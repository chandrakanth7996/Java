/* 1984. Minimum Difference Between Highest and Lowest of K Scores
ou are given a 0-indexed integer array nums, where nums[i] represents the score of the ith student. You are also given an integer k.
Pick the scores of any k students from the array so that the difference between the highest and the lowest of the k scores is minimized.
Return the minimum possible difference.
Example 1:
Input: nums = [90], k = 1
Output: 0
Explanation: There is one way to pick score(s) of one student:
- [90]. The difference between the highest and lowest score is 90 - 90 = 0.
The minimum possible difference is 0.
Example 2:
Input: nums = [9,4,1,7], k = 2
Output: 2
Explanation: There are six ways to pick score(s) of two students:
- [9,4,1,7]. The difference between the highest and lowest score is 9 - 4 = 5.
- [9,4,1,7]. The difference between the highest and lowest score is 9 - 1 = 8.
- [9,4,1,7]. The difference between the highest and lowest score is 9 - 7 = 2.
- [9,4,1,7]. The difference between the highest and lowest score is 4 - 1 = 3.
- [9,4,1,7]. The difference between the highest and lowest score is 7 - 4 = 3.
- [9,4,1,7]. The difference between the highest and lowest score is 7 - 1 = 6.
The minimum possible difference is 2.  */

class Solution {
    public int minimumDifference(int[] nums, int k) {
       int n = nums.length;
       int l=0,r=0;
       int temp = 0;
       int ans = Integer.MAX_VALUE;
       Arrays.sort(nums);
       for(r=0;r<n;r++){
            if(r-l == k){
                l++;          // Move the left pointer if the size exceeds k
            }
            if(r-l+1 == k){        // checking the length between left and right with k
                temp = nums[r] - nums[l];    // Calculate difference between max and min in subset
                ans = Math.min(ans,temp);    // Update minimum difference
            }
       }
       return ans;     // 2
    }
}
