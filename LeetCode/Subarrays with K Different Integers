/* 992. Subarrays with K Different Integers
Given an integer array nums and an integer k, return the number of good subarrays of nums.
A good array is an array where the number of different integers in that array is exactly k.
For example, [1,2,3,1,2] has 3 different integers: 1, 2, and 3. A subarray is a contiguous part of an array.
Example 1:
Input: nums = [1,2,1,2,3], k = 2
Output: 7
Explanation: Subarrays formed with exactly 2 different integers: [1,2], [2,1], [1,2], [2,3], [1,2,1], [2,1,2], [1,2,1,2]
Example 2:
Input: nums = [1,2,1,3,4], k = 3
Output: 3
Explanation: Subarrays formed with exactly 3 different integers: [1,2,1,3], [2,1,3], [1,3,4]. */

class Solution {
    public int atmostK(int[] nums, int k){          // Function to count subarrays with at most k distinct integers
        HashMap<Integer,Integer> hm = new HashMap<>();    // HashMap to store counts of distinct integers
        int n = nums.length;
        int l=0,r=0,temp=0,ans=0;
        for(r=0;r<n;r++){
            int a = nums[r];
            hm.put(a,hm.getOrDefault(a,0)+1);      // frequency count

           while(hm.size()>k){                      // While the number of distinct elements exceeds k
            int lval = nums[l];                      // Get the leftmost element
            hm.put(lval,hm.get(lval)-1);               // Decrease its count
            if(hm.get(lval)==0){                      // If the count is zero, remove it from the map
                hm.remove(lval);
            }
            l++;
           }
            ans += r-l+1;                  // Add the count of subarrays ending at r
        }
        return ans;
    }
    public int subarraysWithKDistinct(int[] nums, int k) {
        return atmostK(nums,k)-atmostK(nums,k-1);
    }
}
