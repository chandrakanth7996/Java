Given an integer array nums, return the most frequent even element.
If there is a tie, return the smallest one. If there is no such element, return -1.
Example 1:
Input: nums = [0,1,2,2,4,4,1]
Output: 2
Explanation:
The even elements are 0, 2, and 4. Of these, 2 and 4 appear the most.
We return the smallest one, which is 2.
Example 2:
Input: nums = [4,4,4,9,2,4]
Output: 4
Explanation: 4 is the even element appears the most.
Example 3:
Input: nums = [29,47,21,41,13,37,25,7]
Output: -1
Explanation: There is no even element.


class Solution {
    public int mostFrequentEven(int[] nums) {
        int n = nums.length;
        HashMap<Integer,Integer> hm = new HashMap<>();
        for(int i=0;i<n;i++){                               // Count frequency of each number
            int num = nums[i];
            if(num%2==0){                                  // Only count even numbers
            hm.put(num,hm.getOrDefault(num,0)+1);
            }
        }
        if(hm.isEmpty()){                                 // If no even number exists, return -1
            return -1;
        }
        
        int maxFreq = -1;
        int result = Integer.MAX_VALUE;
        for(Map.Entry<Integer,Integer> entry : hm.entrySet()){             // Find the most frequent even number
            int num = entry.getKey();
            int freq = entry.getValue();
            if(freq>maxFreq || freq==maxFreq && num<result){            // If current number's frequency is higher, or if same frequency but smaller number
                maxFreq = freq;
                result = num;
            }
        }
        return result;
    }
}
