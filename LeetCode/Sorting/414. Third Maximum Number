Given an integer array nums, return the third distinct maximum number in this array. If the third maximum does not exist, return the maximum number.
Example 1:
Input: nums = [3,2,1]
Output: 1
Explanation:
The first distinct maximum is 3.
The second distinct maximum is 2.
The third distinct maximum is 1.
Example 2:
Input: nums = [1,2]
Output: 2
Explanation:
The first distinct maximum is 2.
The second distinct maximum is 1.
The third distinct maximum does not exist, so the maximum (2) is returned instead.


class Solution {
    public int thirdMax(int[] nums) {
        int n = nums.length;
        HashSet<Integer> hs = new HashSet<>();            // Remove duplicates by converting to a set
        for(int i: nums){
            hs.add(i);
        }
        List<Integer> list = new ArrayList<>(hs);                           // Convert the set back to a list and sort it in descending order
        Collections.sort(list,Collections.reverseOrder());
        if(list.size()>2){                                              // Check if the third maximum exists
            return list.get(2);                                      // Return the third element
        } else {
            return list.get(0);                                // If less than 3 distinct numbers, return the maximum
        }
    }
}
