You are given two positive integers n and k. A factor of an integer n is defined as an integer i where n % i == 0.
Consider a list of all factors of n sorted in ascending order, return the kth factor in this list or return -1 if n has less than k factors.
Example 1:
Input: n = 12, k = 3
Output: 3
Explanation: Factors list is [1, 2, 3, 4, 6, 12], the 3rd factor is 3.
Example 2:
Input: n = 7, k = 2
Output: 7
Explanation: Factors list is [1, 7], the 2nd factor is 7.

class Solution {
    public int kthFactor(int n, int k) {
        List<Integer> ls = new ArrayList<>();
        for(int i=1;i*i<=n;i++){
            if(n%i==0){
                ls.add(i);
                if(i != n/i){
                    ls.add(n/i);
                }
            }
        }
        Collections.sort(ls);
        if(k<=ls.size()){
            return ls.get(k-1);
        } else {
            return -1;
        }
    }
}

Explanation:
i = 1:

We check if 12 % 1 == 0, which is true.
So, 1 is added to the list of factors.
Now we check if 1 != 12 / 1. Since 1 != 12, we also add 12 to the list.
At this point, factors = [1, 12].

i = 2:

We check if 12 % 2 == 0, which is true.
So, 2 is added to the list of factors.
Now we check if 2 != 12 / 2. Since 2 != 6, we also add 6 to the list.
At this point, factors = [1, 12, 2, 6].

i = 3:

We check if 12 % 3 == 0, which is true.
So, 3 is added to the list of factors.
Now we check if 3 != 12 / 3. Since 3 != 4, we also add 4 to the list.
At this point, factors = [1, 12, 2, 6, 3, 4].

Step 3: Sort the Factors
After collecting all the factors, we sort the list factors in ascending order:

Collections.sort(ls);
So, factors = [1, 2, 3, 4, 6, 12].
