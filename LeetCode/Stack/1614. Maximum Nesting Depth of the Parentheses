Given a valid parentheses string s, return the nesting depth of s. The nesting depth is the maximum number of nested parentheses.
Example 1:
Input: s = "(1+(2*3)+((8)/4))+1"
Output: 3
Explanation:
Digit 8 is inside of 3 nested parentheses in the string.
Example 2:
Input: s = "(1)+((2))+(((3)))"
Output: 3
Explanation:
Digit 3 is inside of 3 nested parentheses in the string.
Example 3:
Input: s = "()(())((()()))"
Output: 3

class Solution {
    public int maxDepth(String s) {
        Stack<Character> st = new Stack<>();
        int ans=0;
        for(int i=0;i<s.length();i++){
            char ch = s.charAt(i);
            if(ch=='('){                            // if '(' then add to stack
                st.push('(');
            }else if(ch==')'){                      // if ')' then remove from stack
                st.pop();
            }
            ans = Math.max(ans,st.size());              
        }
        return ans;
    }
}
