/* Given an array nums of size n, return the majority element.
The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.
Example 1:
Input: nums = [3,2,3]
Output: 3
Example 2:
Input: nums = [2,2,1,1,1,2,2]
Output: 2 */

//1st way of solution using HashMap
class Solution {
    public int majorityElement(int[] nums) {
        HashMap<Integer,Integer> hs = new HashMap<>();
        for(int i=0;i<nums.length;i++){
            hs.put(nums[i],hs.getOrDefault(nums[i],0)+1);
        }
        int ans = -1;
        for(int res: hs.keySet()){
            if((hs.get(res)) > (nums.length/2)){
                return res;
            }
        }
        return ans;
    }
}

//2nd way of solution using Arrays
class Solution {
    public int majorityElement(int[] nums) {
        Arrays.sort(nums);   //sort the arrays
        int n = nums.length/2; // find the length of the array
        return nums[n];  // return the mid the array
    }
}
