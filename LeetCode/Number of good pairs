/* 1512 - Given an array of integers nums, return the number of good pairs.
A pair (i, j) is called good if nums[i] == nums[j] and i < j.
Example 1:
Input: nums = [1,2,3,1,1,3]
Output: 4
Explanation: There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed.
Example 2:
Input: nums = [1,1,1,1]
Output: 6
Explanation: Each pair in the array are good.
Example 3:
Input: nums = [1,2,3]
Output: 0 */

// 1st way of solution using brute force
class Solution {
    public int numIdenticalPairs(int[] nums) {
        int count = 0;
        for(int i=0;i<nums.length;i++){
            for(int j=i+1;j<nums.length;j++){
                if(nums[i]==nums[j]){
                    count++;
                }
            }
        }
        return count;
    }
}

// O(n) - 2nd way of solution using HashMap
import java.util.*;
class HelloWorld {
    public static void main(String[] args) {
        HashMap<Integer,Integer> hs = new HashMap<>();
        int[] nums = {1,2,3,1,1,3};
        int ans = 0;
        for(int i=0;i<nums.length;i++){
            if(hs.containsKey(nums[i])){
                ans = ans + hs.get(nums[i]); // check and add the elements in array
                hs.put(ans,hs.get(nums[i])+1); // frequency count
            } else {
                hs.put(nums[i],1);
            }
        }
        System.out.println(ans);
    }
}

// 3rd way of solution using HashMap - sum of n natural numbers formula
class Solution {
    public int numIdenticalPairs(int[] nums) {
        HashMap<Integer,Integer> hs = new HashMap<>();
        int ans = 0;
        for(int i=0;i<nums.length;i++){
            int key = nums[i];
            hs.put(key,hs.getOrDefault(key,0)+1);
        }
        for(int res : hs.keySet()){
            int val = hs.get(res);
            ans = ans + val*(val-1)/2;  // sum of natural numbers
        }
        return ans;
    }
}
