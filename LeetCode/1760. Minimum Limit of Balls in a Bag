You are given an integer array nums where the ith bag contains nums[i] balls. You are also given an integer maxOperations.
You can perform the following operation at most maxOperations times:
Take any bag of balls and divide it into two new bags with a positive number of balls.
For example, a bag of 5 balls can become two new bags of 1 and 4 balls, or two new bags of 2 and 3 balls.
Your penalty is the maximum number of balls in a bag. You want to minimize your penalty after the operations.
Return the minimum possible penalty after performing the operations.
Example 1:
Input: nums = [9], maxOperations = 2
Output: 3
Explanation: 
- Divide the bag with 9 balls into two bags of sizes 6 and 3. [9] -> [6,3].
- Divide the bag with 6 balls into two bags of sizes 3 and 3. [6,3] -> [3,3,3].
The bag with the most number of balls has 3 balls, so your penalty is 3 and you should return 3.

class Solution {
    // Function to check if it's possible to split the array into parts such that
    // no part exceeds the value of 'k', with at most 'max' operations.
    public boolean isPossible(int[] nums,int max,int k){
        int n = nums.length;
        for(int i=0;i<n;i++){
            int val = nums[i];
            int temp = val/k;        // Calculate the number of parts required to make 'val' less than or equal to 'max'
            if(val%k!=0){
                temp++;
            }
            temp--;                   // We subtract 1 because we only count the extra splits, not the initial part
            max-=temp;

            if(max<0){
                return false;
            }
        }
        return true;
    }
    public int minimumSize(int[] nums, int maxOperations) {
        int start = 1;
        int end = (int)Math.pow(10,9);
        while(start<=end){
            int mid = start + (end-start)/2;
            if(isPossible(nums,maxOperations,mid)){
                end = mid-1;
            } else {
                start = mid+1;
            }
        }
        return start;
    }
}
