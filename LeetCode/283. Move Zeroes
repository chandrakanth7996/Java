Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.
Note that you must do this in-place without making a copy of the array.
Example 1:
Input: nums = [0,1,0,3,12]
Output: [1,3,12,0,0]
Example 2:
Input: nums = [0]
Output: [0]

class Solution {
    public void moveZeroes(int[] nums) {
        int n = nums.length;
        int nonZero = 0;
        for(int i=0;i<n;i++){
            if(nums[i]!=0){                      // Check if the current element is non-zero
                nums[nonZero]=nums[i];            // Place it at the 'nonZero' index
                nonZero++;
            }
        }
        while(nonZero<n){
            nums[nonZero]=0;        // Set the element at 'nonZero' index to 0
            nonZero++;
        }
        System.out.println(Arrays.toString(nums));
    }
}

Explanation:
Initial Array:
arr = {0, 1, 0, 3, 12}
nonZero = 0
Step 1: Move Non-Zero Elements to the Front
We iterate over each element in the array.

i = 0: arr[0] is 0 → No change, nonZero stays at 0.
i = 1: arr[1] is 1 (non-zero) → Place 1 at arr[nonZero] (arr[0] = 1), then increment nonZero to 1.
arr becomes {1, 1, 0, 3, 12}
i = 2: arr[2] is 0 → No change, nonZero stays at 1.
i = 3: arr[3] is 3 (non-zero) → Place 3 at arr[nonZero] (arr[1] = 3), then increment nonZero to 2.
arr becomes {1, 3, 0, 3, 12}
i = 4: arr[4] is 12 (non-zero) → Place 12 at arr[nonZero] (arr[2] = 12), then increment nonZero to 3.
arr becomes {1, 3, 12, 3, 12}
At the end of this loop, arr looks like {1, 3, 12, 3, 12}, with nonZero now pointing to index 3.

Step 2: Fill Remaining Elements with Zeros
Now, we set all elements from nonZero to the end of the array to zero:

nonZero = 3: arr[3] = 0, then increment nonZero to 4.
arr becomes {1, 3, 12, 0, 12}
nonZero = 4: arr[4] = 0, then increment nonZero to 5.
arr becomes {1, 3, 12, 0, 0}
Now nonZero equals n, so we stop.

Final Array
arr = {1, 3, 12, 0, 0}
