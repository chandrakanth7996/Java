A peak element is an element that is strictly greater than its neighbors.
Given a 0-indexed integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.
You may imagine that nums[-1] = nums[n] = -âˆž. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array.
You must write an algorithm that runs in O(log n) time.
Example 1:
Input: nums = [1,2,3,1]
Output: 2
Explanation: 3 is a peak element and your function should return the index number 2.

class Solution {
    public int findPeakElement(int[] nums) {
        int start = 0;
        int end = nums.length-1;
        while(start<end){
            int mid = start+(end-start)/2;  
            // If the element at mid is greater than the element at mid + 1, 
            // the peak is likely on the left side or at mid itself.
            if(nums[mid]>nums[mid+1]){
                end = mid;
            } else {
              // If the element at mid is less than or equal to the element at mid + 1,
              // the peak must be on the right side.
                start = mid+1;
            }
        }
        return start;
    }
}
