You are given two strings word1 and word2. Merge the strings by adding letters in alternating order, starting with word1. If a string is longer than the other, append the additional letters onto the end of the merged string.
Return the merged string.
Example 1:
Input: word1 = "abc", word2 = "pqr"
Output: "apbqcr"
Explanation: The merged string will be merged as so:
word1:  a   b   c
word2:    p   q   r
merged: a p b q c r

class Solution {
    public String mergeAlternately(String word1, String word2) {
        int n1 = word1.length();
        int n2 = word2.length();
        StringBuilder mergeString = new StringBuilder();
        int i=0;
        while(i<n1 || i<n2){
            if(i<n1){
                mergeString.append(word1.charAt(i));
            }
            if(i<n2){
                mergeString.append(word2.charAt(i));
            }
            i++;
        }
        return mergeString.toString();
    }
}

Explanation:
### **Initialization:**
- `word1 = "abc"`, so `n1 = 3` (length of word1).
- `word2 = "pqr"`, so `n2 = 3` (length of word2).
- `mergeString = new StringBuilder()`, initializes an empty StringBuilder to hold the result.
- `i = 0`, starts at the first character.

### **Iteration 1 (i = 0):**
- `i = 0`, so we are processing the first character from both strings.
- **Step 5**: Since `i < n1` (i.e., `0 < 3`), we append the character from `word1` at index `0`: `word1.charAt(0)` = `'a'`.
  - `mergeString = "a"`.
- **Step 6**: Since `i < n2` (i.e., `0 < 3`), we append the character from `word2` at index `0`: `word2.charAt(0)` = `'p'`.
  - `mergeString = "ap"`.
- **Step 7**: Increment `i` to `1`.

### **Iteration 2 (i = 1):**
- `i = 1`, so we are processing the second character from both strings.
- **Step 5**: Since `i < n1` (i.e., `1 < 3`), we append the character from `word1` at index `1`: `word1.charAt(1)` = `'b'`.
  - `mergeString = "apb"`.
- **Step 6**: Since `i < n2` (i.e., `1 < 3`), we append the character from `word2` at index `1`: `word2.charAt(1)` = `'q'`.
  - `mergeString = "apbq"`.
- **Step 7**: Increment `i` to `2`.

### **Iteration 3 (i = 2):**
- `i = 2`, so we are processing the third character from both strings.
- **Step 5**: Since `i < n1` (i.e., `2 < 3`), we append the character from `word1` at index `2`: `word1.charAt(2)` = `'c'`.
  - `mergeString = "apbc"`.
- **Step 6**: Since `i < n2` (i.e., `2 < 3`), we append the character from `word2` at index `2`: `word2.charAt(2)` = `'r'`.
  - `mergeString = "apbcr"`.
- **Step 7**: Increment `i` to `3`.

### **Termination:**
- Now, `i = 3`, and both strings have been fully processed (`i >= n1` and `i >= n2`).
- **Step 8**: Convert `mergeString` (which is a `StringBuilder`) to a `String` using `mergeString.toString()`.
  - The result is `"apbqcr"`.

### **Final Output:**
- The function returns `"apbqcr"`.

---

### **Visual Summary of Execution:**

| i   | word1[i] | word2[i] | mergeString (after step 5 and 6) |
|-----|----------|----------|----------------------------------|
| 0   | 'a'      | 'p'      | "ap"                             |
| 1   | 'b'      | 'q'      | "apbq"                           |
| 2   | 'c'      | 'r'      | "apbcr"                          |

After the loop completes, we return the string `"apbqcr"`.

