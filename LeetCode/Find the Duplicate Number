/* 287. Find the Duplicate Number
Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.
There is only one repeated number in nums, return this repeated number.
You must solve the problem without modifying the array nums and uses only constant extra space.
Example 1:
Input: nums = [1,3,4,2,2]
Output: 2  */

// 1st way of solution
class Solution {
    public int findDuplicate(int[] nums) {
        int n = nums.length;
        int duplicate = 0;
        Arrays.sort(nums);
        for(int i=0;i<n-1;i++){
            if(nums[i] == nums[i+1]){
                duplicate = nums[i];
            }
        }
        return duplicate;
    }
}

//2nd way of solution 
import java.util.*;
class HelloWorld {
    public static void main(String[] args) {
        int[] arr = {1,2,3,4,4};
        int n = arr.length;
        int duplicate = 0;
        for(int i=0;i<n;i++){
            for(int j=i+1;j<n;j++){
                if(arr[i]==arr[j]){
                    duplicate = arr[i];
                }
            }
        }
        System.out.println(duplicate);
    }
}

// 3rd way of solution using HashMap
import java.util.*;
class HelloWorld {
    public static void main(String[] args) {
        int[] arr = {1,2,3,4,4};
        int n = arr.length;
        HashMap<Integer,Integer> hm = new HashMap<>();
        for(int i=0;i<n;i++){
            int nums = arr[i];
            hm.put(nums,hm.getOrDefault(nums,0)+1);
        }
        for(Map.Entry<Integer,Integer> m : hm.entrySet()){
            if(m.getValue() > 1){                    // checks if the count is greater than 1 (indicating duplicates).
                System.out.println(m.getKey());
            }
        }
        
    }
}
