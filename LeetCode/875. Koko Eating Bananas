Koko loves to eat bananas. There are n piles of bananas, the ith pile has piles[i] bananas. The guards have gone and will come back in h hours.
Koko can decide her bananas-per-hour eating speed of k. Each hour, she chooses some pile of bananas and eats k bananas from that pile. If the pile has less than k bananas, she eats all of them instead and will not eat any more bananas during this hour.
Koko likes to eat slowly but still wants to finish eating all the bananas before the guards return.
Return the minimum integer k such that she can eat all the bananas within h hours.
Example 1:
Input: piles = [3,6,7,11], h = 8
Output: 4
Example 2:
Input: piles = [30,11,23,4,20], h = 5
Output: 30

//This method checks if it's possible to eat all the bananas in piles in h hours, given that Koko eats at a speed of k bananas per hour. 
The method calculates how many hours it takes to eat the bananas at speed k and compares it with h.
class Solution {
    public boolean isPossible(int[] piles, int h, int k){
        int n = piles.length;
        int upper = 0;
        for(int i=0;i<n;i++){
            upper = piles[i]/k;      // For each pile, calculate how many hours it takes to eat at speed k
            if(piles[i]%k!=0){
                upper++;
            }
            h-=upper;                // Subtract the hours from the total available hours
            if(h<0){                  // If we run out of time, it's not possible to eat all bananas
                return false;
            }
        }
        return true;              // If we didn't run out of time, it's possible
    }
    public int minEatingSpeed(int[] piles, int h) {
        int start =1;
        int end = (int)Math.pow(10,9);
        while(start<=end){
            int mid = start+(end-start)/2;
            if(isPossible(piles,h,mid)){
                end = mid-1;
            } else {
                start = mid+1;
            }
        }
        return start;
    }
}


Dry run:
Calculate mid:
java
Copy code
mid = (1 + 10^9) / 2 = 500000000
Check if it's possible to eat all bananas at speed 500000000:
For each pile:
piles[0] = 3 → hours = 3 / 500000000 = 0 (Koko finishes in 0 hours)
piles[1] = 6 → hours = 6 / 500000000 = 0 (Koko finishes in 0 hours)
piles[2] = 7 → hours = 7 / 500000000 = 0 (Koko finishes in 0 hours)
piles[3] = 11 → hours = 11 / 500000000 = 0 (Koko finishes in 0 hours)
Total time taken = 0 + 0 + 0 + 0 = 0 hours, which is less than 8 hours. So, it's possible.
