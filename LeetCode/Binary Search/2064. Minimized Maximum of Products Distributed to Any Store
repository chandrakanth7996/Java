You are given an integer n indicating there are n specialty retail stores. There are m product types of varying amounts, which are given as a 0-indexed integer array quantities, where quantities[i] represents the number of products of the ith product type.
You need to distribute all products to the retail stores following these rules:
A store can only be given at most one product type but can be given any amount of it. After distribution, each store will have been given some number of products (possibly 0). Let x represent the maximum number of products given to any store. You want x to be as small as possible, i.e., you want to minimize the maximum number of products that are given to any store.
Return the minimum possible x.

Example 1:
Input: n = 6, quantities = [11,6]
Output: 3
Explanation: One optimal way is:
- The 11 products of type 0 are distributed to the first four stores in these amounts: 2, 3, 3, 3
- The 6 products of type 1 are distributed to the other two stores in these amounts: 3, 3
The maximum number of products given to any store is max(2, 3, 3, 3, 3, 3) = 3.

class Solution {
    public boolean isPossible(int n,int[] quantities, int limit){
        int temp = 0;
        for(int i=0;i<quantities.length;i++){
            int val = quantities[i];
            
            temp = val/limit;
            if(val%limit != 0){
                temp++;
            }

            n-=temp;

            if(n<0){
                return false;
            }
        }
        return true;
    }
    public int minimizedMaximum(int n, int[] quantities) {
        int start = 1;
        int end = (int)Math.pow(10,5);
        while(start<=end){
            int mid = start + (end-start)/2;
            if(isPossible(n,quantities,mid)){
                end = mid -1;
            } else {
                start = mid+1;
            }
        }
        return start;
    }
}


Logic of isPossible():
For each quantity val in the quantities array:
Calculate how many containers are needed for the current quantity:
Use integer division to get the number of fully-filled containers: val / limit.
If thereâ€™s a remainder (val % limit != 0), an additional container is needed to store the leftover items.
Reduce the number of available containers (n) by the number of containers used for this particular quantity.
If at any point, the available containers (n) become less than 0, it means we don't have enough containers to distribute the items, and we return false.
If we can distribute all items with the available containers, we return true.
