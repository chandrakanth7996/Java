/* 2529. Maximum Count of Positive Integer and Negative Integer
Given an array nums sorted in non-decreasing order, return the maximum between the number of positive integers and the number of negative integers.
In other words, if the number of positive integers in nums is pos and the number of negative integers is neg, then return the maximum of pos and neg.
Note that 0 is neither positive nor negative.
Example 1:
Input: nums = [-2,-1,-1,1,2,3]
Output: 3
Explanation: There are 3 positive integers and 3 negative integers. The maximum count among them is 3.
Example 2:
Input: nums = [-3,-2,-1,0,0,1,2]
Output: 3
Explanation: There are 2 positive integers and 3 negative integers. The maximum count among them is 3. */

class Solution {
    public int maximumCount(int[] nums) {
        int n = nums.length;
        int countP=0,countN=0;
        for(int i=0;i<n;i++){
            if(nums[i]>0){
                countP++;
            } else if(nums[i]<0){
                countN++;
            }
        }
        return Math.max(countP,countN);      // Return the maximum count between positive and negative integers
    }
}


// 2nd way of solution using Binary search algorithm
import java.util.*;
class HelloWorld {
    public static int leftMost(int[] nums, int target){                // Function to find the leftmost index where `target` can be inserted in `nums`
        int start = 0;
        int end = nums.length-1;
        while(start<=end){
            int mid = start+(end-start)/2;
            if(nums[mid]>=target){                                // If the middle element is greater than or equal to the target,
                end = mid-1;                                      // move the end pointer to mid - 1 to search in the left half
            }else {
                start = mid+1;                                   // Otherwise, move the start pointer to mid + 1 to search in the right half
            }
        }
        return start;
    }
    public static void main(String[] args) {
        int[] nums = {-2,-1,-1,1,2,3,4,8,9,89};
        int neg = leftMost(nums,0);                // Find the index to insert 0
        int one = leftMost(nums,1);                 // Find the index to insert 1
        int pos = nums.length-one;                 // Calculate the number of positive numbers
        int res = Math.max(neg,pos);
        System.out.println(res);
    }
}

Step-by-Step Explanation:
Finding Negative Numbers Count (neg):

The goal is to count how many negative numbers are in the array.
The binarySearch(arr, 0) searches for the first index where the value is greater than or equal to 0.
The result of binarySearch(arr, 0) will give the index of the first non-negative number in the array.
For the array [-2, -1, -1, 1, 2, 3], the first non-negative number is 1, which is at index 3.
So, neg will be 3, because there are 3 negative numbers in the array (-2, -1, -1).
Finding Positive Numbers Count (pos):

The goal is to count how many positive numbers are in the array (numbers greater than 0).
The binarySearch(arr, 1) searches for the first index where the value is greater than or equal to 1.
For the array [-2, -1, -1, 1, 2, 3], the first positive number is 1, which is at index 3.
one = 3 means that the first number greater than or equal to 1 is at index 3.
To find the count of positive numbers, you subtract one from the total array length:
arr.length is 6 (because there are 6 elements in the array).
pos = arr.length - one = 6 - 3 = 3, so there are 3 positive numbers (1, 2, 3).
Final Step (Finding the Maximum of Negative and Positive Counts):

Finally, the code calculates the maximum of the counts of negative and positive numbers:
neg = 3 (number of negative numbers)
pos = 3 (number of positive numbers)
res = Math.max(neg, pos) = Math.max(3, 3) = 3.
