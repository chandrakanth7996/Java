You are given a string s.
Your task is to remove all digits by doing this operation repeatedly:
Delete the first digit and the closest non-digit character to its left.
Return the resulting string after removing all digits.
Note that the operation cannot be performed on a digit that does not have any non-digit character to its left.
Example 1:
Input: s = "abc"
Output: "abc"
Explanation:
There is no digit in the string.
Example 2:
Input: s = "cb34"
Output: ""
Explanation:
First, we apply the operation on s[2], and s becomes "c4".
Then we apply the operation on s[1], and s becomes "".
Constraints:
1 <= s.length <= 100
s consists only of lowercase English letters and digits.
The input is generated such that it is possible to delete all digits.


class Solution {
    public String clearDigits(String s) {
        Stack<Character> st = new Stack<>();
        StringBuilder sb = new StringBuilder();
        for(int i=0;i<s.length();i++){
            char ch = s.charAt(i);
            if(ch>='0' && ch<='9'){                  // Check if the character is a digit (between '0' and '9')
                st.pop();                            // If it's a digit, pop from the stack (remove last non-digit character)
            }else{
                st.push(ch);                        // If it's not a digit, push the character to the stack
            }
        }
        while(!st.isEmpty()){                      // Now the stack contains the remaining non-digit characters in reverse order.
            sb.append(st.pop());                    // We need to reverse them back to their original order.
        }
        sb.reverse();                             // Reverse the StringBuilder to restore the order of characters
        return sb.toString();
    }
}
