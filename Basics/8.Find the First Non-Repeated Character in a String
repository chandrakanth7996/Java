Write a method in Java that takes a string as input and returns the first character that does not repeat. If all characters repeat, return a specific indicator (like null or '\0').
Example
Input: "swiss"
Output: 'w'

// solution using HashMap
import java.util.*;
class HelloWorld {

    public static void main(String[] args) {
        String str = "swiss";
        int n = str.length();
        HashMap<Character,Integer> hm = new HashMap<>();               // HashMap<Character, Integer> to count occurrences of each character in the string.
        for(int i=0;i<n;i++){
            char ch = str.charAt(i);
            hm.put(ch,hm.getOrDefault(ch,0)+1);
        }
        for(char ch : str.toCharArray()){                              // Find and print the first non-repeated character,  Loop through the string for order
            if(hm.get(ch)==1){
                System.out.println(ch);
                return;                                            // After printing the first non-repeated character, exit the method to avoid any additional output.
            }
        }
    }
}

// 2nd solution
import java.util.*;
class Main {
    public static void main(String[] args) {
        String str = "programming";
        System.out.print(findFirstNonRepeatingCharacter(str));
    }
    public static Character findFirstNonRepeatingCharacter(String str){
        Map<Character,Integer> hm = new HashMap<>();
        for(int i=0;i<str.length();i++){
            char ch = str.charAt(i);
            hm.put(ch,hm.getOrDefault(ch,0)+1);
        }
        for(char c : str.toCharArray()){
            if(hm.get(c)==1){
                return c;
            }
        }
        return null;
    }
}

Difference between return vs break: 
return:
When you use return, it immediately exits the entire method. This means if you put a return inside a loop, it will not only stop the loop but also stop any further execution in the method.
It is typically used when you want to provide a value back to the caller or stop all processing in that method.

break:
When you use break, it only exits the innermost loop in which it resides. After a break, the program continues executing the code that follows the loop.
You would use break when you want to stop the loop but continue executing the remaining code in the method.
