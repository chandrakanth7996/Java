You have a sorted array, and you need to remove the duplicates. The result should not change the relative order of elements, and you should return the number of unique elements.
For example, for the array:
input: [0, 0, 1, 1, 1, 2, 2, 3, 3, 4]
output: [0, 1, 2, 3, 4]


import java.util.*;
class HelloWorld {
    public static void main(String[] args) {
        int[] arr = {0,0,1,1,1,2,2,3,3,4};
        int n = arr.length;
        int index = 0;
        Arrays.sort(arr);
        for(int i=0;i<n-1;i++){
            if(arr[i]!=arr[i+1]){
                arr[index]=arr[i];
                index++;
            }
        }
        arr[index]=arr[n-1];
        index++;
       System.out.println(Arrays.toString(Arrays.copyOfRange(arr,0,index)));
    }
}

// 2nd way of solution using HashSet
import java.util.*;
class Main {
    public static void main(String[] args) {
        int[] arr = {0, 0, 1, 1, 1, 2, 2, 3, 3, 4};
        int n = arr.length;
        HashSet<Integer> hs = new HashSet<>();
        for(int num : arr){
            hs.add(num);
        }
        System.out.println(hs);
    }
}
