Find Maximum Cumulative Sum of a Subarray
Problem: Given an integer array nums, find the maximum cumulative sum of any continuous subarray (at least one element). This is known as the Maximum Subarray Sum problem.
Example:
Input: [-2, 1, -3, 4, -1, 2, 1, -5, 4]
Output: 6 (the subarray [4, -1, 2, 1] has the largest sum)

import java.util.*;
class HelloWorld {
    public static void main(String[] args) {
        int[] arr = {-2, 1, -3, 4, -1, 2, 1, -5, 4};
        int n = arr.length;
        int sum=0;
        int ans = Integer.MIN_VALUE;
        for(int i=0;i<n;i++){
            sum = Math.max(arr[i],sum+arr[i]);        // Decide whether to add arr[i] to the current subarray or start fresh from arr[i]
            ans = Math.max(ans,sum);                  // Update ans if the current subarray sum is the best we've seen
        }
        System.out.println(ans);
    }
}

Dry Run:
For arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4]:

Initialize: sum = 0, ans = Integer.MIN_VALUE.
Iteration 1 (i = 0, arr[i] = -2): sum = max(-2, 0 + -2) = -2, ans = max(Integer.MIN_VALUE, -2) = -2.
Iteration 2 (i = 1, arr[i] = 1): sum = max(1, -2 + 1) = 1, ans = max(-2, 1) = 1.
Iteration 3 (i = 2, arr[i] = -3): sum = max(-3, 1 + -3) = -2, ans = max(1, -2) = 1.
Iteration 4 (i = 3, arr[i] = 4): sum = max(4, -2 + 4) = 4, ans = max(1, 4) = 4.
Continue similarly, until you reach the final ans = 6.
