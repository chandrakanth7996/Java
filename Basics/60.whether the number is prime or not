Write a Java function that takes an integer as input and returns a boolean indicating whether the number is prime or not.
Definition of a Prime Number:
A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.
Example Inputs and Outputs:
- Input: 5, Output: true
- Input: 6, Output: false
- Input: 23, Output: true
- Input: 37, Output: true
- Input: 48, Output: false

Constraints:
- The input integer can be any value between 1 and 10^9 (inclusive).
- Your function should return a boolean value (true or false).

import java.util.*;
class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        System.out.println(isPrime(n));
    }
    public static boolean isPrime(int n){
        if(n<2){
            return false;
        }
        for(int i=2;i<Math.sqrt(n);i++){
            if(n%i==0){
                return false;
            }
        }
        return true;
    }
}

Explanation:
- Start by checking if the input number is less than 2. If it is, return false, since prime numbers are greater than 1.

- Create a loop that iterates from 2 to the square root of the input number.
- Inside the loop, check if the input number is divisible by the current iteration number.
- If it is, return false, since the number is not prime.

- If the loop completes without finding any divisors, return true, indicating that the number is prime.

- Consider using the Math.sqrt() function to calculate the square root of the input number.
