flatMap: 
flatMap takes a Function that transforms an element into a stream (or another kind of flattened structure). 
It then flattens these individual streams into a single stream.

// 1st example
import java.util.*;
import java.util.stream.*;
class Main {
    public static void main(String[] args) {
        List<List<Integer>> listOfLists = Arrays.asList(
            Arrays.asList(1, 2, 3),
            Arrays.asList(4, 5, 6),
            Arrays.asList(7, 8, 9)
        );

        // Using flatMap to flatten the list of lists
        List<Integer> flattenedList = listOfLists.stream()
            .flatMap(List::stream) // Flatten each inner list
            .collect(Collectors.toList());

        System.out.println(flattenedList);
    }
}

// 2nd example 
import java.util.*;
import java.util.stream.*;
class Main {
    public static void main(String[] args) {
       List<List<Integer>> listOfLists = Arrays.asList(
            Arrays.asList(1, 2, 3),
            Arrays.asList(4, 5, 6),
            Arrays.asList(7, 8, 9)
        );

        // Using flatMap to flatten and filter even numbers
        List<Integer> filteredFlattenedList = listOfLists.stream()
            .flatMap(list -> list.stream())  // Flatten each list into a stream
            .filter(num -> num % 2 != 0)    // Filter odd numbers
            .collect(Collectors.toList());

        System.out.println(filteredFlattenedList);
    }
}


