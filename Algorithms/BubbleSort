// Bubble sort

What is Bubble Sort?
Bubble Sort is a simple comparison-based sorting algorithm. It works by repeatedly stepping through the list, comparing adjacent elements, 
and swapping them if they are in the wrong order. The process is repeated until the list is sorted.
It is called "Bubble Sort" because the larger elements "bubble up" to the end of the list (or smaller elements bubble down, depending on how you are sorting).

How Bubble Sort Works:
Starting from the first element of the array, compare it with the next element.
If the first element is larger than the next element, swap them.
Move to the next pair of adjacent elements, and repeat step 2.
At the end of the pass, the largest element has "bubbled" to the end of the array.
Repeat the process for the remaining elements, ignoring the last sorted elements.
Stop when no more swaps are needed, indicating that the array is sorted.

 Time Complexity of Bubble Sort:
1. Best Case: O(n)
   If the array is already sorted, the algorithm will only need one pass to confirm that no swaps are needed. 
    This is the best case scenario where the array is already in order.

2. Worst Case: O(n²)
   In the worst case (when the array is sorted in reverse order), the algorithm will need to perform n-1 passes, and in each pass, 
    it will compare every element with the next one. Thus, the time complexity becomes O(n^2).

3. Average Case: O(n²)
   On average, bubble sort will still need to perform n-1 passes, with each pass requiring n-i-1 comparisons (where `i` is the current pass number). 
    Therefore, the average time complexity is also O(n^2).

 Space Complexity:
 Space Complexity: O(1)
  Bubble sort is an in-place sorting algorithm, meaning it does not require any extra space (other than a temporary variable for swapping). 
    It sorts the array by modifying it directly.

 Advantages of Bubble Sort:
1. Simple to understand and implement.
2. In-place sorting (no extra memory required).
3. It can be a good choice for small datasets or educational purposes.

 Disadvantages of Bubble Sort:
1. **Inefficient** for large datasets. Its time complexity of $O(n^2)$ makes it slow for large arrays.
2. Many optimized algorithms like Quick Sort or Merge Sort perform much better in practice.


import java.util.*;
class HelloWorld {
    public static void main(String[] args) {
        int[] arr = {124,431,144,12,03,14};
        boolean swap = false;
        for(int i=0;i<arr.length;i++){
            for(int j=0;j<arr.length-1;j++){
                if(arr[j]>arr[j+1]){
                    int temp = arr[j+1];
                    arr[j+1] = arr[j];
                    arr[j] = temp;
                    swap = true;
                }
            }
            if(swap == false){
                break;
            }
        }
        //1st way to print array
        for(int i=0;i<arr.length;i++){
            System.out.print(arr[i]+" "); // 3 12 14 124 144 431
        }
        //2nd way to print array
        System.out.print(Arrays.toString(arr)); //[3, 12, 14, 124, 144, 431]
        //3rd way to print array
        for(int a : arr){
            System.out.print(a+" "); //3 12 14 124 144 431 
        }
    }
}

// 2nd method

import java.util.*;
class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] arr = new int[n];
        for(int i=0;i<n;i++){
            arr[i] = sc.nextInt();
        }
        bubbleSort(arr);
        System.out.print(Arrays.toString(arr));
    }
    public static void bubbleSort(int[] arr){
        for(int i=0;i<arr.length-1;i++){
            for(int j=0;j<arr.length-i-1;j++){
                if(arr[j]>arr[j+1]){
                    int temp = arr[j];
                    arr[j] = arr[j+1];
                    arr[j+1] = temp;
                }
            }
        }
    }
}
