// Binary Search for the Greatest Element Less Than a Target

import java.util.*;
class HelloWorld {
    public static int bs(int[] arr, int target){
        int start = 0;
        int end = arr.length-1;
        int ans = 0;
        while(start<=end){
            int mid = start+(end-start)/2;
             if(arr[mid]<target){            // If the middle element is less than the target
                start = mid+1;                 // Move to the right half of the array
            }else if(arr[mid]>target){       If the middle element is greater than the target
                ans = mid;                // Update ans to the current middle element
                end = mid-1;              // Move to the left half of the array
            }
        }
        return ans;            // 1
    }
    public static void main(String[] args) {
        int[] arr = {1,3,5,7,8,10};
        int target = 2;
        System.out.println(bs(arr,target));
    }
}


// 2nd way of solution

import java.util.*;
class HelloWorld {
    public static int bs(int[] arr, int target){
        int start = 0;
        int end = arr.length-1;
        while(start<=end){
            int mid = start+(end-start)/2;
             if(arr[mid]<target){                // If the middle element is less than the target
                start = mid+1;                    // Move start to the right half
            }else if(arr[mid]>target){                // If the middle element is greater than the target
                end = mid-1;                        // Move end to the left half
            }
        }
        return start;        // 2             // Return the index where the target would be inserted to maintain sorted order
    }
    public static void main(String[] args) {
        int[] arr = {1,3,5,7,8,10};
        int target = 4;
        System.out.println(bs(arr,target));
    }
}
