/*  34. Find First and Last Position of Element in Sorted Array
Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.
If target is not found in the array, return [-1, -1].
You must write an algorithm with O(log n) runtime complexity.
Example 1:
Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:
Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]  */

class Solution {
    public int left(int[] nums,int target){               // Function to find the leftmost index of the target
        int start = 0;
        int end = nums.length-1;
        while(start<=end){
            int mid = start+(end-start)/2;
            if(nums[mid]>=target){                             // Check if the middle element is greater than or equal to target
                end = mid-1;                                  // Move the end index left
            } else {
                start = mid+1;                              // Move the start index right
            }
        }
        if(start >= nums.length){                        // Check if the target is out of bounds
            return -1;                                   // Target not found
        }
        if(nums[start] != target){                        // Verify that the start index points to the target
            return -1;                                    // Target not found
        }
        return start;                                    // Return the leftmost index of the target
    }
    public int right(int[] nums,int target){            // Function to find the rightmost index of the target
        int start = 0;
        int end = nums.length-1;
        while(start<=end){
            int mid = start+(end-start)/2;
            if(nums[mid]>target){                         // Check if the middle element is greater than target
                end = mid-1;                              // Move the end index left
            } else {
                start = mid+1;                              // Move the start index right
            }
        }
        if(end < 0){                                       // Check if the end index is out of bounds
            return -1;
        }
        if(nums[end] != target){                           // Verify that the end index points to the target
            return -1;
        }
        return end;                                        // Return the rightmost index of the target
    }
    public int[] searchRange(int[] nums, int target) {
        int l = left(nums,target);
        int r = right(nums,target);
        return new int[] {l,r};
    }
}
